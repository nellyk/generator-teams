{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Yo Teams - the Microsoft Teams app generator \u00b6 A Yeoman Generator for Microsoft Teams Apps projects. The most comprehensive and complete development toolkit for Microsoft Teams development . Yo Teams allows you to build Microsoft Teams applications based on TypeScript and node.js on your terms, in your editor of choice, without any external or online dependencies. This generator is built and maintained by the community, for the community. Generator support: \u00b6 Microsoft Teams Tabs Including support for configuring Tabs as SharePoint Web Parts of full page applications Including support for Single-Sign-On Tabs Including support for full screen tabs Including a dedicated scaffolding option for Microsoft Viva Connection tabs Microsoft Bot Framework Bots Based on Bot Framework 4.9+ Support for calling (audio and video) Microsoft Teams Message extensions and actions Multiple configuration options using adaptive cards, task modules, static parameters Support for configuration and settings Link unfurling Microsoft Teams and Outlook connectors Microsoft Teams outgoing web hooks The generated project is ready to run and deploy to Azure and includes a variety of features such as modifying the Microsoft Teams schema, support for Azure Application Insights, a pluggable framework to add additional features. For more information about developing custom Microsoft Teams app see the Microsoft Teams developer documentation Installation \u00b6 The Teams generator is distributed as an NPM package. If you have the Yeoman tool and the Gulp CLI task manager installed you can install the generator globally using: npm i -g generator-teams or using yarn: yarn global add generator-teams See the User Guide to learn more about the Teams generator, how to set it up and its capabilities. Getting started \u00b6 Open up a command prompt and create a new directory where you want to create your project and in that directory type the command yo teams . This will start the Teams Apps generator and you will be asked a set of questions. yo teams After answering several questions you can select what items you want added to your new project. You can select a single one or any combination of items. See the Build your first Microsoft Teams app to learn more on how to create your first Microsoft Teams app project. Microsoft 365 Patterns and Practices \u00b6 The Teams generator is an open-source project driven by the Microsoft 365 Patterns and Practices initiative. The project is built and managed publicly on GitHub at https://github.com/pnp/generator-teams and accepts community contributions. We would encourage you to try it and tell us what you think . We would also love your help! We have a number of feature requests that are a good starting point to contribute to the project. \u201cSharing is caring\u201d Microsoft 365 Patterns and Practices team","title":"Home"},{"location":"#yo-teams-the-microsoft-teams-app-generator","text":"A Yeoman Generator for Microsoft Teams Apps projects. The most comprehensive and complete development toolkit for Microsoft Teams development . Yo Teams allows you to build Microsoft Teams applications based on TypeScript and node.js on your terms, in your editor of choice, without any external or online dependencies. This generator is built and maintained by the community, for the community.","title":"Yo Teams - the Microsoft Teams app generator"},{"location":"#generator-support","text":"Microsoft Teams Tabs Including support for configuring Tabs as SharePoint Web Parts of full page applications Including support for Single-Sign-On Tabs Including support for full screen tabs Including a dedicated scaffolding option for Microsoft Viva Connection tabs Microsoft Bot Framework Bots Based on Bot Framework 4.9+ Support for calling (audio and video) Microsoft Teams Message extensions and actions Multiple configuration options using adaptive cards, task modules, static parameters Support for configuration and settings Link unfurling Microsoft Teams and Outlook connectors Microsoft Teams outgoing web hooks The generated project is ready to run and deploy to Azure and includes a variety of features such as modifying the Microsoft Teams schema, support for Azure Application Insights, a pluggable framework to add additional features. For more information about developing custom Microsoft Teams app see the Microsoft Teams developer documentation","title":"Generator support:"},{"location":"#installation","text":"The Teams generator is distributed as an NPM package. If you have the Yeoman tool and the Gulp CLI task manager installed you can install the generator globally using: npm i -g generator-teams or using yarn: yarn global add generator-teams See the User Guide to learn more about the Teams generator, how to set it up and its capabilities.","title":"Installation"},{"location":"#getting-started","text":"Open up a command prompt and create a new directory where you want to create your project and in that directory type the command yo teams . This will start the Teams Apps generator and you will be asked a set of questions. yo teams After answering several questions you can select what items you want added to your new project. You can select a single one or any combination of items. See the Build your first Microsoft Teams app to learn more on how to create your first Microsoft Teams app project.","title":"Getting started"},{"location":"#microsoft-365-patterns-and-practices","text":"The Teams generator is an open-source project driven by the Microsoft 365 Patterns and Practices initiative. The project is built and managed publicly on GitHub at https://github.com/pnp/generator-teams and accepts community contributions. We would encourage you to try it and tell us what you think . We would also love your help! We have a number of feature requests that are a good starting point to contribute to the project. \u201cSharing is caring\u201d Microsoft 365 Patterns and Practices team","title":"Microsoft 365 Patterns and Practices"},{"location":"releases/","text":"Release overview \u00b6 This is the release history of the Microsoft Teams Apps generator( generator-teams ). Detailed descriptions can always be found in the CHANGELOG.md file or each branch. Release notes \u00b6 Version Release date Upgrades Tag Notes 2.7.1 2019-05-08 n/a 2.8.0 2019-05-20 n/a 2.9.0 2019-06-14 to 2.11.1 deprecated 2.9.1 2019-06-15 to 2.11.1 2.10.0 2019-07-18 to 2.11.1 2.11.0 2019-08-06 to 2.11.1 deprecated 2.11.1 2019-08-14 n/a 2.12.0 2020-03-15 to 2.14.0 2.13.0 2020-04-16 to 2.14.0 2.14.0 2020-05-18 to 2.16.0 2.15.0 2020-06-20 to 2.16.0 2.16.0 2020-10-28 2.17.1 2020-12-07 n/a 3.0.0 2021-02-07 to 3.3.0 3.0.1 2021-02-11 to 3.3.0 3.0.2 2021-02-24 to 3.3.0 3.0.3 2021-03-02 to 3.3.0 3.1.0 2021-05-21 to 3.3.0 3.2.0 2021-06-07 to 3.3.0 3.3.0 2021-09-30 n/a How to install a specific version \u00b6 Execute the following using the version or tag of your choice Using version: npm install -g generator-teams@3.2.0 Using tag: npm install -g generator-teams@latest How to run a specific version using npx \u00b6 Install npx globally npm install -g npx Execute the following using the version of your choice npx -p yo -p generator-teams@3.2.0 -- yo teams","title":"Release overview"},{"location":"releases/#release-overview","text":"This is the release history of the Microsoft Teams Apps generator( generator-teams ). Detailed descriptions can always be found in the CHANGELOG.md file or each branch.","title":"Release overview"},{"location":"releases/#release-notes","text":"Version Release date Upgrades Tag Notes 2.7.1 2019-05-08 n/a 2.8.0 2019-05-20 n/a 2.9.0 2019-06-14 to 2.11.1 deprecated 2.9.1 2019-06-15 to 2.11.1 2.10.0 2019-07-18 to 2.11.1 2.11.0 2019-08-06 to 2.11.1 deprecated 2.11.1 2019-08-14 n/a 2.12.0 2020-03-15 to 2.14.0 2.13.0 2020-04-16 to 2.14.0 2.14.0 2020-05-18 to 2.16.0 2.15.0 2020-06-20 to 2.16.0 2.16.0 2020-10-28 2.17.1 2020-12-07 n/a 3.0.0 2021-02-07 to 3.3.0 3.0.1 2021-02-11 to 3.3.0 3.0.2 2021-02-24 to 3.3.0 3.0.3 2021-03-02 to 3.3.0 3.1.0 2021-05-21 to 3.3.0 3.2.0 2021-06-07 to 3.3.0 3.3.0 2021-09-30 n/a","title":"Release notes"},{"location":"releases/#how-to-install-a-specific-version","text":"Execute the following using the version or tag of your choice Using version: npm install -g generator-teams@3.2.0 Using tag: npm install -g generator-teams@latest","title":"How to install a specific version"},{"location":"releases/#how-to-run-a-specific-version-using-npx","text":"Install npx globally npm install -g npx Execute the following using the version of your choice npx -p yo -p generator-teams@3.2.0 -- yo teams","title":"How to run a specific version using npx"},{"location":"about/license/","text":"License \u00b6 Copyright (c) Microsoft Corporation. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"Copyright (c) Microsoft Corporation. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/telemetry/","text":"Telemetry \u00b6 The generator-teams package and the build packages ( yoteams-build-core and yoteams-deploy ) includes a telemetry feature that collectes usage data and exception information when the generator or build package tasks crashes. It's important that the generator-teams team understands how the generator and the build packages are uses so they can be improved. Scope \u00b6 generator-teams is collecting telemetry about what configuration is used when scaffolding a new project. The build packages is collecting telemetry about what tasks is being used when building or debugging a project. Telemetry isn't collected from using the generated project or when the genereated project is running. How to opt out \u00b6 Telemetry is enabled by default. To opt out of the telemetry feature set the YOTEAMS_TELEMETRY_OPTOUT environment variable to \u00b41\u00b4 or \u00b4true\u00b4. To opt out of telemetry feature when scaffolding a project use the -no-telemetry flag in combination with the yo teams command. Data points \u00b6 The telemetry feature doesn't collect personal data, such as usernames or email addresses. It does not scan your code and does not extract project-level data, such as name, repository, or author. The data is sent and secured securely to Microsoft servers using the Azure Monitor technology. The following data is collected: Name and aruments of Gulp tasks used Version of generator-teams used Version of yoteams-* build and helper packages used Client type and operating system Location (city, province and country) Configuration options (excluding any values) when scaffolding a project Protecting your privacy is important to us. If you suspect telemetry is collecting sensitive data or the data is being insecurely or inappropriately handled, file an issu in the pnp/generator-teams repository.","title":"Telemetry"},{"location":"about/telemetry/#telemetry","text":"The generator-teams package and the build packages ( yoteams-build-core and yoteams-deploy ) includes a telemetry feature that collectes usage data and exception information when the generator or build package tasks crashes. It's important that the generator-teams team understands how the generator and the build packages are uses so they can be improved.","title":"Telemetry"},{"location":"about/telemetry/#scope","text":"generator-teams is collecting telemetry about what configuration is used when scaffolding a new project. The build packages is collecting telemetry about what tasks is being used when building or debugging a project. Telemetry isn't collected from using the generated project or when the genereated project is running.","title":"Scope"},{"location":"about/telemetry/#how-to-opt-out","text":"Telemetry is enabled by default. To opt out of the telemetry feature set the YOTEAMS_TELEMETRY_OPTOUT environment variable to \u00b41\u00b4 or \u00b4true\u00b4. To opt out of telemetry feature when scaffolding a project use the -no-telemetry flag in combination with the yo teams command.","title":"How to opt out"},{"location":"about/telemetry/#data-points","text":"The telemetry feature doesn't collect personal data, such as usernames or email addresses. It does not scan your code and does not extract project-level data, such as name, repository, or author. The data is sent and secured securely to Microsoft servers using the Azure Monitor technology. The following data is collected: Name and aruments of Gulp tasks used Version of generator-teams used Version of yoteams-* build and helper packages used Client type and operating system Location (city, province and country) Configuration options (excluding any values) when scaffolding a project Protecting your privacy is important to us. If you suspect telemetry is collecting sensitive data or the data is being insecurely or inappropriately handled, file an issu in the pnp/generator-teams repository.","title":"Data points"},{"location":"about/why-generator/","text":"Why Yo Teams - the Microsoft Teams app generator? \u00b6 A Yeoman Generator for Microsoft Teams Apps projects. The most comprehensive and complete development toolkit for Microsoft Teams development . Yo Teams allows you to build Microsoft Teams applications on any platform based on TypeScript and node.js on your terms, in your editor of choice, without any external or online dependencies. This generator is built and maintained by the community, for the community. Supportability and SLA \u00b6 This library is open-source and community provided library with active community providing support for it. This is not Microsoft provided module so there's no SLA or direct support for this open-source component from Microsoft. Please report any issues using the issues list .","title":"Why this generator"},{"location":"about/why-generator/#why-yo-teams-the-microsoft-teams-app-generator","text":"A Yeoman Generator for Microsoft Teams Apps projects. The most comprehensive and complete development toolkit for Microsoft Teams development . Yo Teams allows you to build Microsoft Teams applications on any platform based on TypeScript and node.js on your terms, in your editor of choice, without any external or online dependencies. This generator is built and maintained by the community, for the community.","title":"Why Yo Teams - the Microsoft Teams app generator?"},{"location":"about/why-generator/#supportability-and-sla","text":"This library is open-source and community provided library with active community providing support for it. This is not Microsoft provided module so there's no SLA or direct support for this open-source component from Microsoft. Please report any issues using the issues list .","title":"Supportability and SLA"},{"location":"concepts/ngrok/","text":"Using ngrok for local development and hosting \u00b6 In order to make development locally a great experience it is recommended to use ngrok , which allows you to publish the localhost on a public DNS, so that you can consume the bot and the other resources in Microsoft Teams. Microsoft Teams is a cloud-based product and requires that your tab content is available from the cloud using HTTPS endpoints. Teams doesn't allow local hosting. Publish your tab to a public URL or use a proxy that exposes your local port to an internet-facing URL. To use ngrok, it is recommended to use the gulp ngrok-serve command, which will read your ngrok settings from the .env file and automatically create a correct manifest file and finally start a local development server using the ngrok settings. Note on ngrok and WSL2 \u00b6 When running a Yo Teams generated solution on WSL2 with ngrok you might experience issues like Failed to complete tunnel connection . Try running ngrok as a separate process pointing to your local IP instead of localhost. For more information see: https://github.com/pnp/generator-teams/issues/189","title":"Tunneling"},{"location":"concepts/ngrok/#using-ngrok-for-local-development-and-hosting","text":"In order to make development locally a great experience it is recommended to use ngrok , which allows you to publish the localhost on a public DNS, so that you can consume the bot and the other resources in Microsoft Teams. Microsoft Teams is a cloud-based product and requires that your tab content is available from the cloud using HTTPS endpoints. Teams doesn't allow local hosting. Publish your tab to a public URL or use a proxy that exposes your local port to an internet-facing URL. To use ngrok, it is recommended to use the gulp ngrok-serve command, which will read your ngrok settings from the .env file and automatically create a correct manifest file and finally start a local development server using the ngrok settings.","title":"Using ngrok for local development and hosting"},{"location":"concepts/ngrok/#note-on-ngrok-and-wsl2","text":"When running a Yo Teams generated solution on WSL2 with ngrok you might experience issues like Failed to complete tunnel connection . Try running ngrok as a separate process pointing to your local IP instead of localhost. For more information see: https://github.com/pnp/generator-teams/issues/189","title":"Note on ngrok and WSL2"},{"location":"concepts/project-structure/","text":"Project Structure \u00b6 The generated project from the Microsoft Teams Apps generator has the following project and file/folder structure. The root folder \u00b6 The root folder contains all the required files you need to build and run your project. gulpfile.js contains configuration for the Gulp tasks. See yoteams-core-build for more information README-XXX.md automatically generated readme file to help you get started .env contains replaceable strings that will be used throughout your project and make it easier for you to move projects between environments. Dockerfile a pre-configured Docker file The src folder \u00b6 The source folder contains your code and is divided into the following folders: client : contains clients side TypeScript code manifest : contains the Microsoft Teams App manifest and icons public : contains static web site files server : contains server side code test : contains test setup files. Note : only added if tests are chosen during initial scaffolding The manifest folder \u00b6 The manifest folder contains the manifest file ( manifest.json ) as well as the two required logos. The manifest file uses replaceable tokens. The client folder \u00b6 The client folder contains the client side React components. All scaffolded client side components are automatically added to client.ts . The server folder \u00b6 The server folder contains the server side Express application, defined in server.ts . The TeamsAppsComponents.ts file is used to export all classes for automatic Express routing detection, that uses the express-msteams-host npm package for the routing setup. The public folder \u00b6 The folder called public contains all the files required for the web application, such as html, assets and css files.","title":"Project structure"},{"location":"concepts/project-structure/#project-structure","text":"The generated project from the Microsoft Teams Apps generator has the following project and file/folder structure.","title":"Project Structure"},{"location":"concepts/project-structure/#the-root-folder","text":"The root folder contains all the required files you need to build and run your project. gulpfile.js contains configuration for the Gulp tasks. See yoteams-core-build for more information README-XXX.md automatically generated readme file to help you get started .env contains replaceable strings that will be used throughout your project and make it easier for you to move projects between environments. Dockerfile a pre-configured Docker file","title":"The root folder"},{"location":"concepts/project-structure/#the-src-folder","text":"The source folder contains your code and is divided into the following folders: client : contains clients side TypeScript code manifest : contains the Microsoft Teams App manifest and icons public : contains static web site files server : contains server side code test : contains test setup files. Note : only added if tests are chosen during initial scaffolding","title":"The src folder"},{"location":"concepts/project-structure/#the-manifest-folder","text":"The manifest folder contains the manifest file ( manifest.json ) as well as the two required logos. The manifest file uses replaceable tokens.","title":"The manifest folder"},{"location":"concepts/project-structure/#the-client-folder","text":"The client folder contains the client side React components. All scaffolded client side components are automatically added to client.ts .","title":"The client folder"},{"location":"concepts/project-structure/#the-server-folder","text":"The server folder contains the server side Express application, defined in server.ts . The TeamsAppsComponents.ts file is used to export all classes for automatic Express routing detection, that uses the express-msteams-host npm package for the routing setup.","title":"The server folder"},{"location":"concepts/project-structure/#the-public-folder","text":"The folder called public contains all the files required for the web application, such as html, assets and css files.","title":"The public folder"},{"location":"contributing/contribution-guidelines/","text":"Contribution guidelines \u00b6 #yoTeams is a community-driven initiative which is open for new ideas as well as for volunteers helping us make it even better and better. Therefore, if you are interested in contributing to this project, we'd like you to read through the contribution guidelines so you know how to contribute to this project. You have a new idea for #yoTeams \u00b6 Great, we always love to add more features and capabilities to #yoTeams! But in case that there is already the same or a similar idea listed in our issue list we would like you to check that list before you submit a new issue. If your ideas is not in that list, then please add a new issue in the issue list of type Feature request and fill out the form with your idea (please describe it as precise as possible so we have a clear understanding what you want to achieve with it). NOTE: If you want to add the idea or feature to the project yourself, please just state that in the issue form. You have found a bug in #yoTeams \u00b6 We try our best to avoid any bugs, but sometimes they do happen though. So if you encounter a bug while using #yoTeams please check if that bug is already part of our issue list and if not we would like to know what problems you encountered. So feel free to add a new issue of type Bug report in the issue list along with information about the bug itself and how to reproduce it. If there is anything unclear to us or we cannot reproduce the bug, we will ask you for clarification to get things sorted out. Fixing typos \u00b6 Typos are embarrassing! Most PR's that fix typos will be accepted immediately. In order to make it easier to review the PR, please narrow the focus instead of sending a huge PR of fixes. DO's & DON'Ts \u00b6 DO follow the same project and test structure as the existing project. DO include tests when adding new functionality and features. When fixing bugs, start with adding a test that highlights how the current behavior is broken. DO keep discussions focused. When a new or related topic comes up it's often better to create new issue than to side track the conversation. DO NOT submit PR's for coding style changes. DO NOT surprise us with big PR's. Instead file an issue & start a discussion so we can agree on a direction before you invest a large amount of time. DO NOT commit code you didn't write. DO NOT submit PR's that refactor existing code without a discussion first.","title":"Guidelines"},{"location":"contributing/contribution-guidelines/#contribution-guidelines","text":"#yoTeams is a community-driven initiative which is open for new ideas as well as for volunteers helping us make it even better and better. Therefore, if you are interested in contributing to this project, we'd like you to read through the contribution guidelines so you know how to contribute to this project.","title":"Contribution guidelines"},{"location":"contributing/contribution-guidelines/#you-have-a-new-idea-for-yoteams","text":"Great, we always love to add more features and capabilities to #yoTeams! But in case that there is already the same or a similar idea listed in our issue list we would like you to check that list before you submit a new issue. If your ideas is not in that list, then please add a new issue in the issue list of type Feature request and fill out the form with your idea (please describe it as precise as possible so we have a clear understanding what you want to achieve with it). NOTE: If you want to add the idea or feature to the project yourself, please just state that in the issue form.","title":"You have a new idea for #yoTeams"},{"location":"contributing/contribution-guidelines/#you-have-found-a-bug-in-yoteams","text":"We try our best to avoid any bugs, but sometimes they do happen though. So if you encounter a bug while using #yoTeams please check if that bug is already part of our issue list and if not we would like to know what problems you encountered. So feel free to add a new issue of type Bug report in the issue list along with information about the bug itself and how to reproduce it. If there is anything unclear to us or we cannot reproduce the bug, we will ask you for clarification to get things sorted out.","title":"You have found a bug in #yoTeams"},{"location":"contributing/contribution-guidelines/#fixing-typos","text":"Typos are embarrassing! Most PR's that fix typos will be accepted immediately. In order to make it easier to review the PR, please narrow the focus instead of sending a huge PR of fixes.","title":"Fixing typos"},{"location":"contributing/contribution-guidelines/#dos-donts","text":"DO follow the same project and test structure as the existing project. DO include tests when adding new functionality and features. When fixing bugs, start with adding a test that highlights how the current behavior is broken. DO keep discussions focused. When a new or related topic comes up it's often better to create new issue than to side track the conversation. DO NOT submit PR's for coding style changes. DO NOT surprise us with big PR's. Instead file an issue & start a discussion so we can agree on a direction before you invest a large amount of time. DO NOT commit code you didn't write. DO NOT submit PR's that refactor existing code without a discussion first.","title":"DO's &amp; DON'Ts"},{"location":"contributing/getting-started/","text":"If you are not currently familiar with Yeoman generator development you will find some helpful links. Basic technologies to know \u00b6 Write your own Yeoman generator - This article provides you with basic insights on how to write a custom Yeoman generator Mocha getting started - To test that the Yeoman generator is working properly a testing framework named Mocha is used Embedded JavaScript templating - EJS is the core engine used in Yeoman to deploy template files and dynamically embed custom settings in the files getting deployed Places to look for help \u00b6 The JavaScript a Yeoman generator uses is based on Node.js and many things are treated differently than in the JavaScript that exists in browsers. Yeoman API Documentation - Besides the getting started guide, there is official documentation available that covers the complete Yeoman API Node.js documentation - In general, a Yeoman generator is written in JavaScript but it is based on Node.js where the development patterns are slightly different. In some cases it might be handy to consult the Node.js documentation.","title":"Getting started"},{"location":"contributing/getting-started/#basic-technologies-to-know","text":"Write your own Yeoman generator - This article provides you with basic insights on how to write a custom Yeoman generator Mocha getting started - To test that the Yeoman generator is working properly a testing framework named Mocha is used Embedded JavaScript templating - EJS is the core engine used in Yeoman to deploy template files and dynamically embed custom settings in the files getting deployed","title":"Basic technologies to know"},{"location":"contributing/getting-started/#places-to-look-for-help","text":"The JavaScript a Yeoman generator uses is based on Node.js and many things are treated differently than in the JavaScript that exists in browsers. Yeoman API Documentation - Besides the getting started guide, there is official documentation available that covers the complete Yeoman API Node.js documentation - In general, a Yeoman generator is written in JavaScript but it is based on Node.js where the development patterns are slightly different. In some cases it might be handy to consult the Node.js documentation.","title":"Places to look for help"},{"location":"releases/release-notes/","text":"Release notes \u00b6 yoteams-build-core v1.3.0 \u00b6 Added \u00b6 Support for Teams manifest schema 1.11 #234 Changes \u00b6 serve commands will now use Webpack dev server to improve client side build and also allows for live-reloading (PR #233 by s-KaiNet) generator-teams v3.3.0 \u00b6 yoteams-deploy v1.0.1 \u00b6 Release 3.0.0 \u00b6 Date released: 2021-02-07 This is a new major version of Yo Teams that contains a multitude of fixes and updates but most significantly it has a new structure of the scaffolded projects and all the default Gulp tasks are moved into a separate package yoteams-build-core . Changes \u00b6 Repository reorganized. generator-teams is moved into packages/generator-teams New projects can only be scaffolded using manifest version 1.8 or later Projects scaffolded with previous versions can not be updated Migrated from TSLint to ESLint Upgraded to use axios@0.21.1 due to security issue Upgraded to use botbuilder@4.11.1 or later due to security issue in axios generator-teams tests rebuilt Changed default answers of some questions to opt-out (false) of features (SharePoint Web Part, Application Insights support, Unit Testing and more) to make default solution simpler Upgraded to Teams JavaScript SDK v1.9 Refactored unit testing with Jest Cleaned up webpack.config.js to not enforce specific patterns Added \u00b6 Added new dedicated build package for Gulp tasks ( packages/yoteams-build-core ) Added a \"Quick scaffolding\" option Added support for Teams schema v1.9 (1.8 still default, as 1.9 not yet supported by clients) Fixed \u00b6 Allowed the usage of the Office Guid ( 00000003-0000-0ff1-ce00-000000000000 ) in Guid validation of SSO Tabs (#171) Fixed an issue where the React npm packages was not correctly added to package.json (#168) Fixed issue where React state was not available in Teams JS SDK callbacks Fixed an issue in the sample Connector implementation How to upgrade an existing project \u00b6 Upgrading projects from earlier versions is not supported in this version How to install \u00b6 To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@3.0.0 --global Release 2.12.0 \u00b6 Date released: 2020-03-05 This release is a breaking update due to the migration to the updated Microsoft Bot Framework 4.7 as well as using a new client side component framework - Microsoft Fluent UI React. Changes \u00b6 Moved to @fluentui/react for user experience, replacing msteams-ui-components-react . See TODO for more information and upgrade details (#84) Refactored package.json so it properly uses dependencies and devDependencies . Updated .deployment file to properly work with the new devDependencies (#93) Updated to Teams SDK 1.6.0 (#96) Migrated to botbuilder@4.7.1 (#89) Default bot implementation are now extending TeamsActivityHandler Removed image from bot welcome card Added \u00b6 Added compression support for HTTP requests Integration tests first version, npm run test-integration (#103) For full details see the change log . How to upgrade an existing project \u00b6 Due to breaking changes in this project cannot be upgraded by using the upgrade option in the generator. It is recommended that you create a new project with the 2.12+ generator and manually move/copy your solution over. manifest.json && .env - can be copied over as is scripts/ * - all React pages has to be updated to use the new @fluentui/react component bots - bots has to changed so that they extend TeamsActivityHandler How to install \u00b6 To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.12.0 --global Release 2.11.1 \u00b6 Date released: 2019-08-14 This release is a bug fix for 2.11.0 Fixes \u00b6 The 2.11.1 includes the following fixes: Fixed an issue where invalid localization info was written to the manifest ( #81 ) Fixed some issues with typings for the inquirer package For full details see the change log . How to install \u00b6 To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.11.1 --global Release 2.11.0 \u00b6 Date released: 2019-08-06 2.11.0 has been deprecated - please install 2.11.1 This release introduces one major feature - the option of including localization to your Microsoft Teams App, which requires manifest version 1.5 and higher. Initial support for upgrading projects created by earlier versions of the generator has also been introduced. Note that upgrading projects will only work for projects created generator 2.9 and later. Updates and changes \u00b6 The 2.11.0 release introduces these new features and changes Added the support for localization of apps (manifest version 1.5+) Added generator version in .yo-rc.json - to be used when upgrading core files Added support for upgrading of core build files For full details see the change log . How to install \u00b6 To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.11.0 --global Release 2.10.0 \u00b6 Date released: 2019-07-18 This summer release adds capabilities to add additional Tabs to an existing project as well as adding a static (personal) tab, as well as the configurable (teams/channel) ones. Also some of the core packages of the generated solution was updated due to npm security warnings. Updates and changes \u00b6 The 2.10.0 release introduces these new features and changes Added the option to choose between a configurable and static tab Added the option of adding additional tabs when running the generator over an existing solution Renamed argument for nodemon to use --inspect instead of --debug due to node.js deprecation warning DEP0062 Moved from guid (deprecated) npm package to uuid , uuid-validate and a custom empty guid Updated gulp-inject version Fixes \u00b6 Fixed invalid payload error in the bot welcome card For full details see the change log . How to install \u00b6 To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.10.0 --global Release 2.9.1 \u00b6 Date released: 2019-06-15 Hot fix for version 2.9.0. See 2.9.0 release notes for all details Updates and changes \u00b6 The 2.9.1 is a hotfix for 2.9.0, due to a postinstall command causing issues. Fixes \u00b6 Removed postinstall npm command For full details see the change log . How to install \u00b6 To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.9.1 --global Release 2.9.0 \u00b6 Date released: 2019-06-14 2.9.0 has been deprecated - please install 2.9.1 This release was focused on bringing the generator up to Microsoft Teams manifest version 1.5 and add support for the latest Microsoft Teams JavaScript SDK. It also contains a refactored build pipeline (Gulp tasks) in order to improve stability and performance, as well as to prepare for future versions of the generator where we plan to include an upgrade path for existing projects. Now each component (client side, server side, CSS, manifest etc) are built independently and incremental builds are only done when changed, while using gulp serve or gulp ngrok-serve . The default landing page, as well as the privacy and terms of use page has received a standardized branding (thanks Stefan Bauer). Updates and changes \u00b6 The 2.9.0 release introduces these new features Added support for manifest version 1.5, new default Added suppot for optionally adding Microsoft Partner Id. More info at https://aka.ms/partner Added files support option for bots (schema version 1.4+) Now persists settings for using unit testing, application insights and the library name Added default logging of \"msteams\" in the .env file Added support for SCSS in the build pipeline Added a default styling to the start page Added an option for Tabs to specify scope; groupcaht or team Added a build option called linting to be able to opt-out of Typescript linting. Use gulp serve --no-linting for faster builds. Updated the @microsoft/teams-js package to version 1.4.2 Added strict handling of inquirer answers in the main generator Refactored the gulp build system into gulpfile.js and gulpfile.config.js Refactored gulp tasks and added new gulp tasks to support independent builds of client side and server side code The watch gulp tasks now only rebuilds the parts that has changed (server side code, client side code, styles or static files) which improves incremental build times Updated gulpfile.js to use the $schema defined in the manifest file for validation and the SCHEMAS object only as backup Clarified some questions that the users is adding Message Extension commands, rather than new message extensions For full details see the change log . How to install \u00b6 To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.9.0 --global Release 2.8.0 \u00b6 Date released: 2019-05-20 Updates and changes \u00b6 The 2.8.0 release introduces these new features Added support for manifest version 1.4, new default Added the option to choose between a search based or action based messaging extension (only available for 1.4 + manfiests) Added support for action based Message Extensions, can now choose from multiple input types, multiple outputs as well as locations for the actions (only available for devPreview manfiests). Added an option to not include configuration for messaging extensions. Note, only action messaging extension can have the config option. Added support for publishing a Tab as a SharePoint Web Part or Full Page Application (requires v1.4 +) For full details see the change log . How to install \u00b6 To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.8.0 --global Release 2.7.1(#anchors-in-markdown) \u00b6 Date released: 2019-05-07 Updates and changes \u00b6 The 2.7.1 release introduces these new features Schema upgrades - allows you to re-run the generator to upgrade from one manifest version to a newer Native ngrok support that allows you to use random or reserved public URLs when building and testing your applications. Use the new gulp ngrok-serve to build the manifest and launch the application using ngrok. Added support for Application Insights When using devPreview manifest version you will now have the option of adding Calling support to your bot For full details see the change log . How to install \u00b6 To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.7.1 --global","title":"Release notes"},{"location":"releases/release-notes/#release-notes","text":"","title":"Release notes"},{"location":"releases/release-notes/#yoteams-build-core-v130","text":"","title":"yoteams-build-core v1.3.0"},{"location":"releases/release-notes/#added","text":"Support for Teams manifest schema 1.11 #234","title":"Added"},{"location":"releases/release-notes/#changes","text":"serve commands will now use Webpack dev server to improve client side build and also allows for live-reloading (PR #233 by s-KaiNet)","title":"Changes"},{"location":"releases/release-notes/#generator-teams-v330","text":"","title":"generator-teams v3.3.0"},{"location":"releases/release-notes/#yoteams-deploy-v101","text":"","title":"yoteams-deploy v1.0.1"},{"location":"releases/release-notes/#release-300","text":"Date released: 2021-02-07 This is a new major version of Yo Teams that contains a multitude of fixes and updates but most significantly it has a new structure of the scaffolded projects and all the default Gulp tasks are moved into a separate package yoteams-build-core .","title":"Release 3.0.0"},{"location":"releases/release-notes/#changes_1","text":"Repository reorganized. generator-teams is moved into packages/generator-teams New projects can only be scaffolded using manifest version 1.8 or later Projects scaffolded with previous versions can not be updated Migrated from TSLint to ESLint Upgraded to use axios@0.21.1 due to security issue Upgraded to use botbuilder@4.11.1 or later due to security issue in axios generator-teams tests rebuilt Changed default answers of some questions to opt-out (false) of features (SharePoint Web Part, Application Insights support, Unit Testing and more) to make default solution simpler Upgraded to Teams JavaScript SDK v1.9 Refactored unit testing with Jest Cleaned up webpack.config.js to not enforce specific patterns","title":"Changes"},{"location":"releases/release-notes/#added_1","text":"Added new dedicated build package for Gulp tasks ( packages/yoteams-build-core ) Added a \"Quick scaffolding\" option Added support for Teams schema v1.9 (1.8 still default, as 1.9 not yet supported by clients)","title":"Added"},{"location":"releases/release-notes/#fixed","text":"Allowed the usage of the Office Guid ( 00000003-0000-0ff1-ce00-000000000000 ) in Guid validation of SSO Tabs (#171) Fixed an issue where the React npm packages was not correctly added to package.json (#168) Fixed issue where React state was not available in Teams JS SDK callbacks Fixed an issue in the sample Connector implementation","title":"Fixed"},{"location":"releases/release-notes/#how-to-upgrade-an-existing-project","text":"Upgrading projects from earlier versions is not supported in this version","title":"How to upgrade an existing project"},{"location":"releases/release-notes/#how-to-install","text":"To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@3.0.0 --global","title":"How to install"},{"location":"releases/release-notes/#release-2120","text":"Date released: 2020-03-05 This release is a breaking update due to the migration to the updated Microsoft Bot Framework 4.7 as well as using a new client side component framework - Microsoft Fluent UI React.","title":"Release 2.12.0"},{"location":"releases/release-notes/#changes_2","text":"Moved to @fluentui/react for user experience, replacing msteams-ui-components-react . See TODO for more information and upgrade details (#84) Refactored package.json so it properly uses dependencies and devDependencies . Updated .deployment file to properly work with the new devDependencies (#93) Updated to Teams SDK 1.6.0 (#96) Migrated to botbuilder@4.7.1 (#89) Default bot implementation are now extending TeamsActivityHandler Removed image from bot welcome card","title":"Changes"},{"location":"releases/release-notes/#added_2","text":"Added compression support for HTTP requests Integration tests first version, npm run test-integration (#103) For full details see the change log .","title":"Added"},{"location":"releases/release-notes/#how-to-upgrade-an-existing-project_1","text":"Due to breaking changes in this project cannot be upgraded by using the upgrade option in the generator. It is recommended that you create a new project with the 2.12+ generator and manually move/copy your solution over. manifest.json && .env - can be copied over as is scripts/ * - all React pages has to be updated to use the new @fluentui/react component bots - bots has to changed so that they extend TeamsActivityHandler","title":"How to upgrade an existing project"},{"location":"releases/release-notes/#how-to-install_1","text":"To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.12.0 --global","title":"How to install"},{"location":"releases/release-notes/#release-2111","text":"Date released: 2019-08-14 This release is a bug fix for 2.11.0","title":"Release 2.11.1"},{"location":"releases/release-notes/#fixes","text":"The 2.11.1 includes the following fixes: Fixed an issue where invalid localization info was written to the manifest ( #81 ) Fixed some issues with typings for the inquirer package For full details see the change log .","title":"Fixes"},{"location":"releases/release-notes/#how-to-install_2","text":"To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.11.1 --global","title":"How to install"},{"location":"releases/release-notes/#release-2110","text":"Date released: 2019-08-06 2.11.0 has been deprecated - please install 2.11.1 This release introduces one major feature - the option of including localization to your Microsoft Teams App, which requires manifest version 1.5 and higher. Initial support for upgrading projects created by earlier versions of the generator has also been introduced. Note that upgrading projects will only work for projects created generator 2.9 and later.","title":"Release 2.11.0"},{"location":"releases/release-notes/#updates-and-changes","text":"The 2.11.0 release introduces these new features and changes Added the support for localization of apps (manifest version 1.5+) Added generator version in .yo-rc.json - to be used when upgrading core files Added support for upgrading of core build files For full details see the change log .","title":"Updates and changes"},{"location":"releases/release-notes/#how-to-install_3","text":"To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.11.0 --global","title":"How to install"},{"location":"releases/release-notes/#release-2100","text":"Date released: 2019-07-18 This summer release adds capabilities to add additional Tabs to an existing project as well as adding a static (personal) tab, as well as the configurable (teams/channel) ones. Also some of the core packages of the generated solution was updated due to npm security warnings.","title":"Release 2.10.0"},{"location":"releases/release-notes/#updates-and-changes_1","text":"The 2.10.0 release introduces these new features and changes Added the option to choose between a configurable and static tab Added the option of adding additional tabs when running the generator over an existing solution Renamed argument for nodemon to use --inspect instead of --debug due to node.js deprecation warning DEP0062 Moved from guid (deprecated) npm package to uuid , uuid-validate and a custom empty guid Updated gulp-inject version","title":"Updates and changes"},{"location":"releases/release-notes/#fixes_1","text":"Fixed invalid payload error in the bot welcome card For full details see the change log .","title":"Fixes"},{"location":"releases/release-notes/#how-to-install_4","text":"To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.10.0 --global","title":"How to install"},{"location":"releases/release-notes/#release-291","text":"Date released: 2019-06-15 Hot fix for version 2.9.0. See 2.9.0 release notes for all details","title":"Release 2.9.1"},{"location":"releases/release-notes/#updates-and-changes_2","text":"The 2.9.1 is a hotfix for 2.9.0, due to a postinstall command causing issues.","title":"Updates and changes"},{"location":"releases/release-notes/#fixes_2","text":"Removed postinstall npm command For full details see the change log .","title":"Fixes"},{"location":"releases/release-notes/#how-to-install_5","text":"To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.9.1 --global","title":"How to install"},{"location":"releases/release-notes/#release-290","text":"Date released: 2019-06-14 2.9.0 has been deprecated - please install 2.9.1 This release was focused on bringing the generator up to Microsoft Teams manifest version 1.5 and add support for the latest Microsoft Teams JavaScript SDK. It also contains a refactored build pipeline (Gulp tasks) in order to improve stability and performance, as well as to prepare for future versions of the generator where we plan to include an upgrade path for existing projects. Now each component (client side, server side, CSS, manifest etc) are built independently and incremental builds are only done when changed, while using gulp serve or gulp ngrok-serve . The default landing page, as well as the privacy and terms of use page has received a standardized branding (thanks Stefan Bauer).","title":"Release 2.9.0"},{"location":"releases/release-notes/#updates-and-changes_3","text":"The 2.9.0 release introduces these new features Added support for manifest version 1.5, new default Added suppot for optionally adding Microsoft Partner Id. More info at https://aka.ms/partner Added files support option for bots (schema version 1.4+) Now persists settings for using unit testing, application insights and the library name Added default logging of \"msteams\" in the .env file Added support for SCSS in the build pipeline Added a default styling to the start page Added an option for Tabs to specify scope; groupcaht or team Added a build option called linting to be able to opt-out of Typescript linting. Use gulp serve --no-linting for faster builds. Updated the @microsoft/teams-js package to version 1.4.2 Added strict handling of inquirer answers in the main generator Refactored the gulp build system into gulpfile.js and gulpfile.config.js Refactored gulp tasks and added new gulp tasks to support independent builds of client side and server side code The watch gulp tasks now only rebuilds the parts that has changed (server side code, client side code, styles or static files) which improves incremental build times Updated gulpfile.js to use the $schema defined in the manifest file for validation and the SCHEMAS object only as backup Clarified some questions that the users is adding Message Extension commands, rather than new message extensions For full details see the change log .","title":"Updates and changes"},{"location":"releases/release-notes/#how-to-install_6","text":"To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.9.0 --global","title":"How to install"},{"location":"releases/release-notes/#release-280","text":"Date released: 2019-05-20","title":"Release 2.8.0"},{"location":"releases/release-notes/#updates-and-changes_4","text":"The 2.8.0 release introduces these new features Added support for manifest version 1.4, new default Added the option to choose between a search based or action based messaging extension (only available for 1.4 + manfiests) Added support for action based Message Extensions, can now choose from multiple input types, multiple outputs as well as locations for the actions (only available for devPreview manfiests). Added an option to not include configuration for messaging extensions. Note, only action messaging extension can have the config option. Added support for publishing a Tab as a SharePoint Web Part or Full Page Application (requires v1.4 +) For full details see the change log .","title":"Updates and changes"},{"location":"releases/release-notes/#how-to-install_7","text":"To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.8.0 --global","title":"How to install"},{"location":"releases/release-notes/#release-271anchors-in-markdown","text":"Date released: 2019-05-07","title":"Release 2.7.1(#anchors-in-markdown)"},{"location":"releases/release-notes/#updates-and-changes_5","text":"The 2.7.1 release introduces these new features Schema upgrades - allows you to re-run the generator to upgrade from one manifest version to a newer Native ngrok support that allows you to use random or reserved public URLs when building and testing your applications. Use the new gulp ngrok-serve to build the manifest and launch the application using ngrok. Added support for Application Insights When using devPreview manifest version you will now have the option of adding Calling support to your bot For full details see the change log .","title":"Updates and changes"},{"location":"releases/release-notes/#how-to-install_8","text":"To get the latest version of the Microsoft Teams Apps generator use the following npm command: npm install generator-teams --global And to install this version specifically use: npm install generator-teams@2.7.1 --global","title":"How to install"},{"location":"releases/releases/","text":"Release overview \u00b6 This is the release history of the Microsoft Teams Apps generator( generator-teams ). Detailed descriptions can always be found in the CHANGELOG.md file or each branch. Release notes \u00b6 Version Release date Upgrades Tag Notes 2.7.1 2019-05-08 n/a 2.8.0 2019-05-20 n/a 2.9.0 2019-06-14 to 2.11.1 deprecated 2.9.1 2019-06-15 to 2.11.1 2.10.0 2019-07-18 to 2.11.1 2.11.0 2019-08-06 to 2.11.1 deprecated 2.11.1 2019-08-14 n/a 2.12.0 2020-03-15 to 2.14.0 2.13.0 2020-04-16 to 2.14.0 2.14.0 2020-05-18 to 2.16.0 2.15.0 2020-06-20 to 2.16.0 2.16.0 2020-10-28 2.17.1 2020-12-07 n/a 3.0.0 2021-02-07 to 3.1.0 3.0.1 2021-02-11 to 3.3.0 3.0.2 2021-02-24 to 3.3.0 3.0.3 2021-03-02 to 3.3.0 3.1.0 2021-05-21 to 3.3.0 3.2.0 2021-06-07 to 3.3.0 3.3.0 2021-09-30 n/a How to install a specific version \u00b6 Execute the following using the version or tag of your choice Using version: npm install -g generator-teams@3.2.0 Using tag: npm install -g generator-teams@latest How to run a specific version using npx \u00b6 Install npx globally npm install -g npx Execute the following using the version of your choice npx -p yo -p generator-teams@3.2.0 -- yo teams","title":"Releases"},{"location":"releases/releases/#release-overview","text":"This is the release history of the Microsoft Teams Apps generator( generator-teams ). Detailed descriptions can always be found in the CHANGELOG.md file or each branch.","title":"Release overview"},{"location":"releases/releases/#release-notes","text":"Version Release date Upgrades Tag Notes 2.7.1 2019-05-08 n/a 2.8.0 2019-05-20 n/a 2.9.0 2019-06-14 to 2.11.1 deprecated 2.9.1 2019-06-15 to 2.11.1 2.10.0 2019-07-18 to 2.11.1 2.11.0 2019-08-06 to 2.11.1 deprecated 2.11.1 2019-08-14 n/a 2.12.0 2020-03-15 to 2.14.0 2.13.0 2020-04-16 to 2.14.0 2.14.0 2020-05-18 to 2.16.0 2.15.0 2020-06-20 to 2.16.0 2.16.0 2020-10-28 2.17.1 2020-12-07 n/a 3.0.0 2021-02-07 to 3.1.0 3.0.1 2021-02-11 to 3.3.0 3.0.2 2021-02-24 to 3.3.0 3.0.3 2021-03-02 to 3.3.0 3.1.0 2021-05-21 to 3.3.0 3.2.0 2021-06-07 to 3.3.0 3.3.0 2021-09-30 n/a","title":"Release notes"},{"location":"releases/releases/#how-to-install-a-specific-version","text":"Execute the following using the version or tag of your choice Using version: npm install -g generator-teams@3.2.0 Using tag: npm install -g generator-teams@latest","title":"How to install a specific version"},{"location":"releases/releases/#how-to-run-a-specific-version-using-npx","text":"Install npx globally npm install -g npx Execute the following using the version of your choice npx -p yo -p generator-teams@3.2.0 -- yo teams","title":"How to run a specific version using npx"},{"location":"tutorials/build-a-connector-for-microsoft-teams/","text":"Build a Connector for Microsoft Teams \u00b6 NOTE: Not updated with version 3.0.0 changes In this tutorial we will walk through creating a Connector for Microsoft Teams using the Microsoft Teams Yeoman generator. It assumes that you have enabled side-loading of Microsoft Teams apps in Microsoft Teams as well as have installed all the prerequisites . Generate your project \u00b6 In a command prompt create a new folder called my-connector where you will have your project files. Run the yo teams command to start the generation of the project. Follow the instructions and choose the solution name, title and company name of your app. When asked for a manifest version choose version 1.5 . At the selection of what items you want to use for your project, unselect A Tab and select only A Connector and press Enter . The generator will ask you a few other questions, such as the URL and if you want to include testing and telemetry - choose default value for the URL and opt-out of both testing and telemetry (answer no). When asked what type of Connector you would like to use, choose A new Connector hosted in this solution . Following this you will be asked for a Connector Id, choose the default value by pressing Enter . We will update this value later. Finally you will be asked for the name of your Connector, specify the name that you would like to be shown in Microsoft Teams. For this tutorial you can use My Connector . Once this is done the generator will create all necessary files and install the required npm packages. Register a Connector in the Connector Portal \u00b6 Next step is to register a Connector in the Outlook Connector portal. You will have all the details in the README file that has been generated by the project ( ./README-myConnector.md ). Open a web browser and navigate to https://outlook.office.com/connectors/publish . You have to be an Office 365 admin to be able to do this. Click on New Connector to create and register the Connector, and the fill in information as follows: NOTE: we will use XXX.ngrok.io as a temporary URL, and replace that later, so we can get the ID of the Connector Connector name - the name of your Connector ( My Connector ) Logo - you have to upload a logo Short description - a short description of your connector Detailed description - a longer more detailed description Company website - the URL of your public web site ( https://XXX.ngrok.io ) Configuration page for your Connector - the configuration page ( https://XXX.ngrok.io/myConnector/config.html ) Valid domains - all domains used by your connector ( https://XXX.ngrok.io/ ) Do you wnat to enable actions on your Connector cards - select Yes Actions URL - the URL to be used for actions ( https://XXX.ngrok.io/api/connector ) I accept the terms and conditions... - check this When done press select Save . To get the ID of your Connector you can copy it from the URL, or choose to download the Teams manifest, using the button on the right. NOTE: you have to register your Connector in the same tenant as you are going to test the Connector. If not, you have to go through Publishing the Connector to the store - making it public. Update your project \u00b6 Open up your project by typing code . (assuming you are using Visual Studio code) in the folder where you created your project. Open the .env file and locate the CONNECTOR_ID token. Replace the empty GUID with the Connector ID you copied from the Connector portal and save the file. . Start the application locally \u00b6 Execute the gulp ngrok-serve command in the folder where your project was created. This will create an ngrok tunnel to your local machine, and dynamically generate a public URL for your project. When the command is starting you will see the temporary ngrok host name listed. . Copy the host name and return to the Connector portal and replace the XXX.ngrok.io with the real generated host name. NOTE: Since this is a temporary and dynamic URL you need to update the Connector portal each and every time you start ngrok-serve . It is recommended to use fixed ngrok names (a paid service) or to publish your application to a well-known host. Also be aware that when you change the URL it might take some time for the changes to reflect. . Side load the application \u00b6 Open up Microsoft Teams and create a new Team. Click on the Teams name and select Apps to side load your application. In the lower right corner select Upload a custom app and then browse to your project folder and the subfolder called package and locate the my-connector.zip file. Select the file and choose to upload it. Go to the General channel and click on ... > Connectors . Scroll all the way down to the end, and you will see your custom connector. Click on Configure . . The configuration interface is being loaded and you are asked to choose a color, notice how the Save button is being enabled and then finally and then click Save . You have now configured your custom connector and you can close the Connectors modal dialog. Test the connector \u00b6 When the project was generated a test end-point for your connector was created. You can invoke by navigating to the generated ngrok hostname and append /api/connector/ping . . This HTTP GET request should invoke all your configured connectors and send a message to the channel where configured. Return to the General channel and verify that the Connector card has been added as a new conversation. . Custom implementations \u00b6 Modify the configuration dialog \u00b6 The configuration dialog is implemented as a React component which is located at ./src/app/scripts/myConnector/MyConnectorConfig.tsx . The default implementation implements a drop down with a selection of colors. You can modify this dialog as your specific application requires. To persist the settings of your configuration you modify the registerOnSaveHandler callback in the componentWillMount . Modify the Connector card \u00b6 The Connector cards are implemented server side, in the ./src/app/myConnector/myConnector.ts file. This file contains two methods. The Connect method is used by the Connector when adding a new Connector. The Outlook.com portal (which is responsible for sending the saved state to your application) is posting to the /api/connector/connect/ endpoint (the Connect method) where you are responsible for persisting any custom information. The other method called Ping is for testing purposes only (you should remove its contents for production systems) and will upon invoke call all the registered connectors and send a card to them, also defined/created in the Ping implementation.","title":"Build a connector for Microsoft Teams"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#build-a-connector-for-microsoft-teams","text":"NOTE: Not updated with version 3.0.0 changes In this tutorial we will walk through creating a Connector for Microsoft Teams using the Microsoft Teams Yeoman generator. It assumes that you have enabled side-loading of Microsoft Teams apps in Microsoft Teams as well as have installed all the prerequisites .","title":"Build a Connector for Microsoft Teams"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#generate-your-project","text":"In a command prompt create a new folder called my-connector where you will have your project files. Run the yo teams command to start the generation of the project. Follow the instructions and choose the solution name, title and company name of your app. When asked for a manifest version choose version 1.5 . At the selection of what items you want to use for your project, unselect A Tab and select only A Connector and press Enter . The generator will ask you a few other questions, such as the URL and if you want to include testing and telemetry - choose default value for the URL and opt-out of both testing and telemetry (answer no). When asked what type of Connector you would like to use, choose A new Connector hosted in this solution . Following this you will be asked for a Connector Id, choose the default value by pressing Enter . We will update this value later. Finally you will be asked for the name of your Connector, specify the name that you would like to be shown in Microsoft Teams. For this tutorial you can use My Connector . Once this is done the generator will create all necessary files and install the required npm packages.","title":"Generate your project"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#register-a-connector-in-the-connector-portal","text":"Next step is to register a Connector in the Outlook Connector portal. You will have all the details in the README file that has been generated by the project ( ./README-myConnector.md ). Open a web browser and navigate to https://outlook.office.com/connectors/publish . You have to be an Office 365 admin to be able to do this. Click on New Connector to create and register the Connector, and the fill in information as follows: NOTE: we will use XXX.ngrok.io as a temporary URL, and replace that later, so we can get the ID of the Connector Connector name - the name of your Connector ( My Connector ) Logo - you have to upload a logo Short description - a short description of your connector Detailed description - a longer more detailed description Company website - the URL of your public web site ( https://XXX.ngrok.io ) Configuration page for your Connector - the configuration page ( https://XXX.ngrok.io/myConnector/config.html ) Valid domains - all domains used by your connector ( https://XXX.ngrok.io/ ) Do you wnat to enable actions on your Connector cards - select Yes Actions URL - the URL to be used for actions ( https://XXX.ngrok.io/api/connector ) I accept the terms and conditions... - check this When done press select Save . To get the ID of your Connector you can copy it from the URL, or choose to download the Teams manifest, using the button on the right. NOTE: you have to register your Connector in the same tenant as you are going to test the Connector. If not, you have to go through Publishing the Connector to the store - making it public.","title":"Register a Connector in the Connector Portal"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#update-your-project","text":"Open up your project by typing code . (assuming you are using Visual Studio code) in the folder where you created your project. Open the .env file and locate the CONNECTOR_ID token. Replace the empty GUID with the Connector ID you copied from the Connector portal and save the file. .","title":"Update your project"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#start-the-application-locally","text":"Execute the gulp ngrok-serve command in the folder where your project was created. This will create an ngrok tunnel to your local machine, and dynamically generate a public URL for your project. When the command is starting you will see the temporary ngrok host name listed. . Copy the host name and return to the Connector portal and replace the XXX.ngrok.io with the real generated host name. NOTE: Since this is a temporary and dynamic URL you need to update the Connector portal each and every time you start ngrok-serve . It is recommended to use fixed ngrok names (a paid service) or to publish your application to a well-known host. Also be aware that when you change the URL it might take some time for the changes to reflect. .","title":"Start the application locally"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#side-load-the-application","text":"Open up Microsoft Teams and create a new Team. Click on the Teams name and select Apps to side load your application. In the lower right corner select Upload a custom app and then browse to your project folder and the subfolder called package and locate the my-connector.zip file. Select the file and choose to upload it. Go to the General channel and click on ... > Connectors . Scroll all the way down to the end, and you will see your custom connector. Click on Configure . . The configuration interface is being loaded and you are asked to choose a color, notice how the Save button is being enabled and then finally and then click Save . You have now configured your custom connector and you can close the Connectors modal dialog.","title":"Side load the application"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#test-the-connector","text":"When the project was generated a test end-point for your connector was created. You can invoke by navigating to the generated ngrok hostname and append /api/connector/ping . . This HTTP GET request should invoke all your configured connectors and send a message to the channel where configured. Return to the General channel and verify that the Connector card has been added as a new conversation. .","title":"Test the connector"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#custom-implementations","text":"","title":"Custom implementations"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#modify-the-configuration-dialog","text":"The configuration dialog is implemented as a React component which is located at ./src/app/scripts/myConnector/MyConnectorConfig.tsx . The default implementation implements a drop down with a selection of colors. You can modify this dialog as your specific application requires. To persist the settings of your configuration you modify the registerOnSaveHandler callback in the componentWillMount .","title":"Modify the configuration dialog"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#modify-the-connector-card","text":"The Connector cards are implemented server side, in the ./src/app/myConnector/myConnector.ts file. This file contains two methods. The Connect method is used by the Connector when adding a new Connector. The Outlook.com portal (which is responsible for sending the saved state to your application) is posting to the /api/connector/connect/ endpoint (the Connect method) where you are responsible for persisting any custom information. The other method called Ping is for testing purposes only (you should remove its contents for production systems) and will upon invoke call all the registered connectors and send a card to them, also defined/created in the Ping implementation.","title":"Modify the Connector card"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/","text":"Build a SharePoint Online Provider Hosted Web Part \u00b6 NOTE: required generator-teams version 2.8.0 or higher. NOTE: Not updated with version 3.5.0 changes This tutorials will guide you through the steps on how to create a Microsoft Teams app with a configurable tab that you can upload to the SharePoint App Catalog and use as a web part or as a single part app page. The use cases for this is: You are already building an application for Microsoft Teams and want to reuse it in SharePoint Online You have requirements on server side rendering or similar requirements that cannot be met with pure JavaScript and SharePoint Framework You're designing a web part that you want to host in an iframe in SharePoint Online. Generate your project \u00b6 Start the Microsoft Teams App generator by invoking the yo teams command. Follow the instructions and input name of your solution and package. Choose a schema version that is 1.4 or higher and then select to create a Tab . Fill in the URL of where you will host the application and optionally add tests and telemetry, and then type the name of your Tab - which will also be the name of your Web Part in SharePoint. When the generator asks if you want to use Quick Scaffolding answer no . If you choose yes you will not be asked about SharePoint Online support and manually have to update your manifest later. When being asked if you want the tab to be available in SharePoint - answer yes and then choose if you want your tab to be available as a web part and/or as a full page application . Once you have selected that the generator will scaffold your project. Inspect the generated code \u00b6 The code is generated in the same way as in the Build your first Microsoft Teams App tutorial with the only difference being in the manifest file. Open the manifest file ( ./src/manifest/manifest.json ) and under configurableTabs you should see an additional two attributes: sharePointPreviewImage and supportedSharePointHosts . The first property specify a preview image (also being scaffolded into the project) to be shown for full page apps and the second attribute specifies if you want to present the Tab as a web part or a full page application, or both. NOTE : you can modify the manifest on an existing tab project to enable support for SharePoint Online. Modify the code \u00b6 NOTE : This is a temporary workaround Currently the useTeams hook will not correctly return the context object while hosted in SharePoint Online and you have to modify the code in the configuration React component (under ./src/client/tabname/tabnameConfig.tsx ) as done in the following example, note the else statement: useEffect (() => { if ( context ) { setText ( context . entityId ); entityId . current = context . entityId ; microsoftTeams . settings . registerOnSaveHandler ( onSaveHandler ); microsoftTeams . settings . setValidityState ( true ); microsoftTeams . appInitialization . notifySuccess (); } else { microsoftTeams . initialize (); microsoftTeams . getContext ( c =>{ setText ( c . entityId ); microsoftTeams . settings . registerOnSaveHandler ( onSaveHandler ); microsoftTeams . settings . setValidityState ( true ); }); } // eslint-disable-next-line react-hooks/exhaustive-deps }, [ context ]); Run the application using ngrok-serve \u00b6 For this tutorial we will use the gulp ngrok-serve --debug command to temporarily generate an ngrok public url to host your application. Note that as soon as you abort the gulp command and run it again, a new URL will be generated and you have to upload the application once again to the SharePoint App Catalog. When you execute gulp ngrok-serve --debug the app will generate a random ngrok public URL and use that URL to package the manifest, into ./package/<manifest>.zip . It will also start a local web server to host your app. Upload the application to the SharePoint Online App Catalog \u00b6 Upload the generated manifest file ( ./package/<manifest>.zip ) to the SharePoint Online App Catalog and a trust the application. Also select the checkbox to make the solution available to all site collections, and select Deploy . Add the web part to a page in SharePoint Online \u00b6 Create a new Site Collection or use anyone you already have and in that site create a new page. From the Web Part gallery locate your tab/web part using the name you entered when you created the project and add it to the page. An alternate option, if you specified that you wanted a full page experience, is when creating the new page select Apps , instead of a page template, and there locate your Teams Tab. When adding the Web Part to the page you will see the Microsoft Teams Tab configuration dialog, inside of SharePoint, and you can configure your tab. Select Save when done. Finish the tutorial by selecting to Publish the page. Your Tab is now rendered in SharePoint:","title":"Build a SharePoint Online Provider hosted web parts"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#build-a-sharepoint-online-provider-hosted-web-part","text":"NOTE: required generator-teams version 2.8.0 or higher. NOTE: Not updated with version 3.5.0 changes This tutorials will guide you through the steps on how to create a Microsoft Teams app with a configurable tab that you can upload to the SharePoint App Catalog and use as a web part or as a single part app page. The use cases for this is: You are already building an application for Microsoft Teams and want to reuse it in SharePoint Online You have requirements on server side rendering or similar requirements that cannot be met with pure JavaScript and SharePoint Framework You're designing a web part that you want to host in an iframe in SharePoint Online.","title":"Build a SharePoint Online Provider Hosted Web Part"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#generate-your-project","text":"Start the Microsoft Teams App generator by invoking the yo teams command. Follow the instructions and input name of your solution and package. Choose a schema version that is 1.4 or higher and then select to create a Tab . Fill in the URL of where you will host the application and optionally add tests and telemetry, and then type the name of your Tab - which will also be the name of your Web Part in SharePoint. When the generator asks if you want to use Quick Scaffolding answer no . If you choose yes you will not be asked about SharePoint Online support and manually have to update your manifest later. When being asked if you want the tab to be available in SharePoint - answer yes and then choose if you want your tab to be available as a web part and/or as a full page application . Once you have selected that the generator will scaffold your project.","title":"Generate your project"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#inspect-the-generated-code","text":"The code is generated in the same way as in the Build your first Microsoft Teams App tutorial with the only difference being in the manifest file. Open the manifest file ( ./src/manifest/manifest.json ) and under configurableTabs you should see an additional two attributes: sharePointPreviewImage and supportedSharePointHosts . The first property specify a preview image (also being scaffolded into the project) to be shown for full page apps and the second attribute specifies if you want to present the Tab as a web part or a full page application, or both. NOTE : you can modify the manifest on an existing tab project to enable support for SharePoint Online.","title":"Inspect the generated code"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#modify-the-code","text":"NOTE : This is a temporary workaround Currently the useTeams hook will not correctly return the context object while hosted in SharePoint Online and you have to modify the code in the configuration React component (under ./src/client/tabname/tabnameConfig.tsx ) as done in the following example, note the else statement: useEffect (() => { if ( context ) { setText ( context . entityId ); entityId . current = context . entityId ; microsoftTeams . settings . registerOnSaveHandler ( onSaveHandler ); microsoftTeams . settings . setValidityState ( true ); microsoftTeams . appInitialization . notifySuccess (); } else { microsoftTeams . initialize (); microsoftTeams . getContext ( c =>{ setText ( c . entityId ); microsoftTeams . settings . registerOnSaveHandler ( onSaveHandler ); microsoftTeams . settings . setValidityState ( true ); }); } // eslint-disable-next-line react-hooks/exhaustive-deps }, [ context ]);","title":"Modify the code"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#run-the-application-using-ngrok-serve","text":"For this tutorial we will use the gulp ngrok-serve --debug command to temporarily generate an ngrok public url to host your application. Note that as soon as you abort the gulp command and run it again, a new URL will be generated and you have to upload the application once again to the SharePoint App Catalog. When you execute gulp ngrok-serve --debug the app will generate a random ngrok public URL and use that URL to package the manifest, into ./package/<manifest>.zip . It will also start a local web server to host your app.","title":"Run the application using ngrok-serve"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#upload-the-application-to-the-sharepoint-online-app-catalog","text":"Upload the generated manifest file ( ./package/<manifest>.zip ) to the SharePoint Online App Catalog and a trust the application. Also select the checkbox to make the solution available to all site collections, and select Deploy .","title":"Upload the application to the SharePoint Online App Catalog"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#add-the-web-part-to-a-page-in-sharepoint-online","text":"Create a new Site Collection or use anyone you already have and in that site create a new page. From the Web Part gallery locate your tab/web part using the name you entered when you created the project and add it to the page. An alternate option, if you specified that you wanted a full page experience, is when creating the new page select Apps , instead of a page template, and there locate your Teams Tab. When adding the Web Part to the page you will see the Microsoft Teams Tab configuration dialog, inside of SharePoint, and you can configure your tab. Select Save when done. Finish the tutorial by selecting to Publish the page. Your Tab is now rendered in SharePoint:","title":"Add the web part to a page in SharePoint Online"},{"location":"tutorials/build-a-tab-with-sso-support/","text":"Build a Tab with Single-Sign-On Support \u00b6 NOTE: required generator-teams version 2.13.0 or higher. NOTE: Not updated with version 3.0.0 changes This tutorial will take you through the necessary steps and configuration that you need to to in Azure Active Directory and in Microsoft Teams in order to create a Microsoft Teams Tab single-sign-on experience. Preparations \u00b6 Before you start configuring and scaffolding your project you need to ensure that decide on where you want to host your Microsoft Teams tab. A Tab is a web page hosted somewhere and it has to be hosted on a publicly available web site. To be able to support the Tab SSO features your Tab also has to be hosted on a well-known address, such as https://myteamsapp.com/tab.html . The important thing here is that the domain name can't change and you are not allowed to use any web site hosted on azurewebsites.net (due to security constraints). For this tutorial we will take advantage of the paid service ngrok service which allows us to proxy the HTTP calls from a well-known publicly available domain to our local server. However this is not for production builds, but the concept is the same. Set up your Azure AD application \u00b6 The first thing that we need to do is to register a new Azure Active Directory application in the Azure AD portal, that will represent your Microsoft Teams tab. You do this by signing in to https://aad.portal.azure.com using a set of credentials that is allowed to register new applications. Then navigate to Azure Active Directory and chose App Registrations in the left hand side menu. Create a new application by clicking on + New registration - on this first screen you choose the name of your application and also what account types you would like to support - choose any of the Account sin any organizational directory... options. Finally click on Register . After the registration you will be redirected to the Application page where you can find the Application (client) ID , copy this ID into a temporary location such as notepad as you will need it shortly. The next thing we need to do is to go to Expose an API and then on Application ID URI click on Set . This will allow you to configure the Application ID URI which is one of the key configurations of your SSO Tab. The Application ID URI MUST have the following format: api://<your host name>/<application id> . That is you need to use the fully qualified domain name you prepared for your tab together with the Application/Client ID to construct that Application ID URI. Microsoft Teams will verify this at runtime, so you MUST use your domain name in the App ID URI. If you're using test, stage and production environments you should create different Azure AD Applications for them - as an Azure AD App can only have one Application ID URI. Once set you should store this App ID URI, together with the Client ID - as we will need them when scaffolding our project later. Next step is to expose a Scope and you create it by clicking at Add a scope . Name it access_as_user and choose that both Admins and users can consent. Then you need to write the user friendly consent display names and descriptions before clicking Add scope . 1fec8e78-bce4-4aaf-ab1b-5451cc387264 - the ID used by the Microsoft Teams desktop and mobile application 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 - the ID use by the Microsoft Teams web application The final configuration we need to do is to grant permissions to the Tab App registration. This is done by navigating to API Permissions and then click on Add a permission . All the permissions we need is in Microsoft Graph , so select that and then we also need to choose that we want to use Delegated Permissions . The permissions you need to select are the following: User.Read - should already be selected when the app was created email offline_access openid profile That's it! Now we are ready to scaffold out our Teams Tab project. Generate your project \u00b6 Start the Microsoft Teams App generator by invoking the yo teams command. Follow the instructions and input name of your solution and package. Choose a schema version that is 1.5 or higher and then select to create a Tab . When asked about the URL where you will host this solution insert the exact URL you used when configuring the Application ID URI previously. Note: we can change this at a later stage by modifying the .env file. Optionally add support for testing and application insights. Choose your name for the Tab and then choose to create a Configurable tab and choose the default options for the rest until you get to the Do you required Azure AD Single-Sign-On support for the Tab? then choose Yes . You will now be asked first for the Application ID and then the Application ID URI that was generated when you registered the App. If you don't remember them or forgot to take a note of them - these values are always available fromt the Application registration summary page. Finally opt-out of enabling the SharePoint Online integration by selecting No, and then wait for the project to scaffold and to install all npm packages. Inspect the generated code \u00b6 Open up the generated project in your favorite code editor and open the manifest file ( ./src/manifest/manifest.json ) and scroll down to the last few lines. You will see an addition of a new configuration there - which tells Teams that we want to use Single-Sign-On using the specified Azure AD application. \"webApplicationInfo\" : { \"id\" : \"{{SSODEMO_APP_ID}}\" , \"resource\" : \"{{SSODEMO_APP_URI}}\" } NOTE: as usual the replaceable parameters can be found in the .env file. The actual tab page is found under ./src/app/scripts/<your tab name>/<your tab name>.tsx . If you inspect this React based page you will notice that the default generated code uses the microsoftTeams.authentication.getAuthToken() to retrive a token when the page is loaded. If all is configured correctly this will return an identity token that can be used to validate the user and in the default case displaying the name of the user. NOTE: this token can not be used to retrieve information from for instance Microsoft Graph. In order to do so you need to implement server side support for the Azure AD on-behalf-of flow to exchange this identity token for another token. Run the application using ngrok-serve \u00b6 In this demo we decided to use ngrok to create a publicly available domain and before running the Teams app we need to configure ngrok by registering the domain we specified previously - and then update the .env file with the ngrok subdomain as well as the ngrok auth key. NOTE: this registration of domains requires a paid subscription to ngrok. If you're using the free version you have to start the application using gulp ngrok-serve and then use the temporary domain name and update your Azure AD app registration with that. To start the application and to generate the manifest run gulp ngrok-serve in the command prompt. Once the command line shows that the application is up and running you can continue with side loading the application into a newly create Microsoft Teams team. Sideload and test the application \u00b6 Go to the Team where you want to test the application, hover over the Team icon/log and choose the Apps icon. In the lower right hand corner choose to Upload a custom app and choose the packaged manifest that was generated ( ./package/<manifest>.zip ), and then click Add to finalize the side loading. Go to a channel in your Team and choose to add a new Tab. You will find your application amongst the available tabs, choose it and follow the instructions to configure it and then click Add . The Tab will now be loaded and within a few seconds you will see that the Tab will write out your name - that it retrieved from the identity token and it shows that everything is working as expected.","title":"Build a tab with SSO"},{"location":"tutorials/build-a-tab-with-sso-support/#build-a-tab-with-single-sign-on-support","text":"NOTE: required generator-teams version 2.13.0 or higher. NOTE: Not updated with version 3.0.0 changes This tutorial will take you through the necessary steps and configuration that you need to to in Azure Active Directory and in Microsoft Teams in order to create a Microsoft Teams Tab single-sign-on experience.","title":"Build a Tab with Single-Sign-On Support"},{"location":"tutorials/build-a-tab-with-sso-support/#preparations","text":"Before you start configuring and scaffolding your project you need to ensure that decide on where you want to host your Microsoft Teams tab. A Tab is a web page hosted somewhere and it has to be hosted on a publicly available web site. To be able to support the Tab SSO features your Tab also has to be hosted on a well-known address, such as https://myteamsapp.com/tab.html . The important thing here is that the domain name can't change and you are not allowed to use any web site hosted on azurewebsites.net (due to security constraints). For this tutorial we will take advantage of the paid service ngrok service which allows us to proxy the HTTP calls from a well-known publicly available domain to our local server. However this is not for production builds, but the concept is the same.","title":"Preparations"},{"location":"tutorials/build-a-tab-with-sso-support/#set-up-your-azure-ad-application","text":"The first thing that we need to do is to register a new Azure Active Directory application in the Azure AD portal, that will represent your Microsoft Teams tab. You do this by signing in to https://aad.portal.azure.com using a set of credentials that is allowed to register new applications. Then navigate to Azure Active Directory and chose App Registrations in the left hand side menu. Create a new application by clicking on + New registration - on this first screen you choose the name of your application and also what account types you would like to support - choose any of the Account sin any organizational directory... options. Finally click on Register . After the registration you will be redirected to the Application page where you can find the Application (client) ID , copy this ID into a temporary location such as notepad as you will need it shortly. The next thing we need to do is to go to Expose an API and then on Application ID URI click on Set . This will allow you to configure the Application ID URI which is one of the key configurations of your SSO Tab. The Application ID URI MUST have the following format: api://<your host name>/<application id> . That is you need to use the fully qualified domain name you prepared for your tab together with the Application/Client ID to construct that Application ID URI. Microsoft Teams will verify this at runtime, so you MUST use your domain name in the App ID URI. If you're using test, stage and production environments you should create different Azure AD Applications for them - as an Azure AD App can only have one Application ID URI. Once set you should store this App ID URI, together with the Client ID - as we will need them when scaffolding our project later. Next step is to expose a Scope and you create it by clicking at Add a scope . Name it access_as_user and choose that both Admins and users can consent. Then you need to write the user friendly consent display names and descriptions before clicking Add scope . 1fec8e78-bce4-4aaf-ab1b-5451cc387264 - the ID used by the Microsoft Teams desktop and mobile application 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 - the ID use by the Microsoft Teams web application The final configuration we need to do is to grant permissions to the Tab App registration. This is done by navigating to API Permissions and then click on Add a permission . All the permissions we need is in Microsoft Graph , so select that and then we also need to choose that we want to use Delegated Permissions . The permissions you need to select are the following: User.Read - should already be selected when the app was created email offline_access openid profile That's it! Now we are ready to scaffold out our Teams Tab project.","title":"Set up your Azure AD application"},{"location":"tutorials/build-a-tab-with-sso-support/#generate-your-project","text":"Start the Microsoft Teams App generator by invoking the yo teams command. Follow the instructions and input name of your solution and package. Choose a schema version that is 1.5 or higher and then select to create a Tab . When asked about the URL where you will host this solution insert the exact URL you used when configuring the Application ID URI previously. Note: we can change this at a later stage by modifying the .env file. Optionally add support for testing and application insights. Choose your name for the Tab and then choose to create a Configurable tab and choose the default options for the rest until you get to the Do you required Azure AD Single-Sign-On support for the Tab? then choose Yes . You will now be asked first for the Application ID and then the Application ID URI that was generated when you registered the App. If you don't remember them or forgot to take a note of them - these values are always available fromt the Application registration summary page. Finally opt-out of enabling the SharePoint Online integration by selecting No, and then wait for the project to scaffold and to install all npm packages.","title":"Generate your project"},{"location":"tutorials/build-a-tab-with-sso-support/#inspect-the-generated-code","text":"Open up the generated project in your favorite code editor and open the manifest file ( ./src/manifest/manifest.json ) and scroll down to the last few lines. You will see an addition of a new configuration there - which tells Teams that we want to use Single-Sign-On using the specified Azure AD application. \"webApplicationInfo\" : { \"id\" : \"{{SSODEMO_APP_ID}}\" , \"resource\" : \"{{SSODEMO_APP_URI}}\" } NOTE: as usual the replaceable parameters can be found in the .env file. The actual tab page is found under ./src/app/scripts/<your tab name>/<your tab name>.tsx . If you inspect this React based page you will notice that the default generated code uses the microsoftTeams.authentication.getAuthToken() to retrive a token when the page is loaded. If all is configured correctly this will return an identity token that can be used to validate the user and in the default case displaying the name of the user. NOTE: this token can not be used to retrieve information from for instance Microsoft Graph. In order to do so you need to implement server side support for the Azure AD on-behalf-of flow to exchange this identity token for another token.","title":"Inspect the generated code"},{"location":"tutorials/build-a-tab-with-sso-support/#run-the-application-using-ngrok-serve","text":"In this demo we decided to use ngrok to create a publicly available domain and before running the Teams app we need to configure ngrok by registering the domain we specified previously - and then update the .env file with the ngrok subdomain as well as the ngrok auth key. NOTE: this registration of domains requires a paid subscription to ngrok. If you're using the free version you have to start the application using gulp ngrok-serve and then use the temporary domain name and update your Azure AD app registration with that. To start the application and to generate the manifest run gulp ngrok-serve in the command prompt. Once the command line shows that the application is up and running you can continue with side loading the application into a newly create Microsoft Teams team.","title":"Run the application using ngrok-serve"},{"location":"tutorials/build-a-tab-with-sso-support/#sideload-and-test-the-application","text":"Go to the Team where you want to test the application, hover over the Team icon/log and choose the Apps icon. In the lower right hand corner choose to Upload a custom app and choose the packaged manifest that was generated ( ./package/<manifest>.zip ), and then click Add to finalize the side loading. Go to a channel in your Team and choose to add a new Tab. You will find your application amongst the available tabs, choose it and follow the instructions to configure it and then click Add . The Tab will now be loaded and within a few seconds you will see that the Tab will write out your name - that it retrieved from the identity token and it shows that everything is working as expected.","title":"Sideload and test the application"},{"location":"tutorials/build-your-first-microsoft-teams-app/","text":"Build your First Microsoft Teams App \u00b6 NOTE: This tutorial is adapted for generator-teams version 3.0.0 or higher. In this tutorial we will walk through creating your very first Microsoft Teams app using the Microsoft Teams Yeoman generator. It assumes that you have enabled side-loading of Microsoft Teams apps in Microsoft Teams as well as have installed all the prerequisites . Generate your project \u00b6 Open up a command prompt and create a new directory where you want to create your project and in that directory type the command yo teams . This will start the Teams Apps generator and you will be asked a set of questions. The first question is about your project name, you can leave it as is by pressing enter. Next question asks you if you want to create a new directory or use the current one. As we already are in the directory we want, we just press enter. The following step asks for a title of your project, this title will be used in the manifest and description of your app. And then you will be asked for a company name, which also will be used in the manifest. The fifth question asks you about what version of the manifest you want to use. For this tutorial select v1.8 , which is the current general available schema. The next question asks you if you want to use Quick scaffolding - if you choose Yes a fewer set of questions will be asked and if you choose No a more advanced set of questions will follow. Choose yes for this tutorial. After this the generator will ask you for what items you want to add to your project. You can select a single one or any combination of items. For now, just select a Tab . Based on what items you select, you will be asked a set of follow-up questions. Now you need to enter a URL of where you will host your solution. This can be any URL, but by default the generator suggests an Azure Web Sites URL. The generator has a lot of built-in advanced features that you can opt-in or opt-out of, also based on your Quick scaffolding choice. For this tutorial choose the default options, except when being asked about support for single-sign-on . Once all questions is answered the generator will scaffold the required files and finally install all the npm packages. This will take a minute or two. Add some code to your tab \u00b6 Once the generator is done you can open up the solution in your favorite code editor. Take a minute or two and familiarize yourself with how the code is organized - you can read more about that in the Project Structure documentation. Your Tab will be located in the ./src/client/helloWorldTab/HelloWorldTab.tsx file. This is the TypeScript React based functional component for your Tab. Locate the return statments and replace the code inside the second <Flex.Item> control so it looks like this: < Flex . Item > < div > Hello World ! Yo Teams rocks ! < /div> < /Flex.Item> Save the file and return to the command prompt. Build your app \u00b6 You can now build your project. This is done in two steps (or one step, see below). First you need to create the Teams App manifest file, that you upload/sideload into Microsoft Teams. This is done by the Gulp task gulp manifest . This will validate the manifest and create a zip file in the ./package directory. To build your solution you use the gulp build command. This will transpile your solution into the ./dist folder. Run your app \u00b6 To run your app you use the gulp serve command. This will build and start a local web server for you to test your app. The command will also rebuild the application whenever you save a file in your project. You should now be able to browse to http://localhost:3007/helloWorldTab/ to ensure that your tab is rendering. However, not in Microsoft Teams yet. Run your app in Microsoft Teams \u00b6 Microsoft Teams does not allow you to have your app hosted on localhost, so you need to either publish it to a public URL or use a proxy such as ngrok. Good news is that the scaffolded project has this built-in. When you run gulp ngrok-serve the ngrok service will be started in the background, with a unique and public DNS entry and it will also package the manifest with that unique URL and then do the exact same thing as gulp serve . After running gulp ngrok-serve , create a new Microsoft Teams team and when it is created click on the Team name, to go to the teams settings and then select Apps . In the lower right corner you should see a link Upload a custom app , select it and then browse to your project folder and the subfolder called package . Select the zip file in that folder and choose open. Your App is now sideloaded into Microsoft Teams. Go back to the General channel and select + to add a new Tab. You should see your tab in the list of tabs. Choose your tab and follow the instructions to add it. Notice that you have a custom configuration dialog, for which you can edit the source. Select Save to add your tab to the channel. Once done your tab should be loaded inside Microsoft Teams! Congrats! You built and deployed your first Microsoft Teams App Yo Teams","title":"Your first Microsoft Teams App"},{"location":"tutorials/build-your-first-microsoft-teams-app/#build-your-first-microsoft-teams-app","text":"NOTE: This tutorial is adapted for generator-teams version 3.0.0 or higher. In this tutorial we will walk through creating your very first Microsoft Teams app using the Microsoft Teams Yeoman generator. It assumes that you have enabled side-loading of Microsoft Teams apps in Microsoft Teams as well as have installed all the prerequisites .","title":"Build your First Microsoft Teams App"},{"location":"tutorials/build-your-first-microsoft-teams-app/#generate-your-project","text":"Open up a command prompt and create a new directory where you want to create your project and in that directory type the command yo teams . This will start the Teams Apps generator and you will be asked a set of questions. The first question is about your project name, you can leave it as is by pressing enter. Next question asks you if you want to create a new directory or use the current one. As we already are in the directory we want, we just press enter. The following step asks for a title of your project, this title will be used in the manifest and description of your app. And then you will be asked for a company name, which also will be used in the manifest. The fifth question asks you about what version of the manifest you want to use. For this tutorial select v1.8 , which is the current general available schema. The next question asks you if you want to use Quick scaffolding - if you choose Yes a fewer set of questions will be asked and if you choose No a more advanced set of questions will follow. Choose yes for this tutorial. After this the generator will ask you for what items you want to add to your project. You can select a single one or any combination of items. For now, just select a Tab . Based on what items you select, you will be asked a set of follow-up questions. Now you need to enter a URL of where you will host your solution. This can be any URL, but by default the generator suggests an Azure Web Sites URL. The generator has a lot of built-in advanced features that you can opt-in or opt-out of, also based on your Quick scaffolding choice. For this tutorial choose the default options, except when being asked about support for single-sign-on . Once all questions is answered the generator will scaffold the required files and finally install all the npm packages. This will take a minute or two.","title":"Generate your project"},{"location":"tutorials/build-your-first-microsoft-teams-app/#add-some-code-to-your-tab","text":"Once the generator is done you can open up the solution in your favorite code editor. Take a minute or two and familiarize yourself with how the code is organized - you can read more about that in the Project Structure documentation. Your Tab will be located in the ./src/client/helloWorldTab/HelloWorldTab.tsx file. This is the TypeScript React based functional component for your Tab. Locate the return statments and replace the code inside the second <Flex.Item> control so it looks like this: < Flex . Item > < div > Hello World ! Yo Teams rocks ! < /div> < /Flex.Item> Save the file and return to the command prompt.","title":"Add some code to your tab"},{"location":"tutorials/build-your-first-microsoft-teams-app/#build-your-app","text":"You can now build your project. This is done in two steps (or one step, see below). First you need to create the Teams App manifest file, that you upload/sideload into Microsoft Teams. This is done by the Gulp task gulp manifest . This will validate the manifest and create a zip file in the ./package directory. To build your solution you use the gulp build command. This will transpile your solution into the ./dist folder.","title":"Build your app"},{"location":"tutorials/build-your-first-microsoft-teams-app/#run-your-app","text":"To run your app you use the gulp serve command. This will build and start a local web server for you to test your app. The command will also rebuild the application whenever you save a file in your project. You should now be able to browse to http://localhost:3007/helloWorldTab/ to ensure that your tab is rendering. However, not in Microsoft Teams yet.","title":"Run your app"},{"location":"tutorials/build-your-first-microsoft-teams-app/#run-your-app-in-microsoft-teams","text":"Microsoft Teams does not allow you to have your app hosted on localhost, so you need to either publish it to a public URL or use a proxy such as ngrok. Good news is that the scaffolded project has this built-in. When you run gulp ngrok-serve the ngrok service will be started in the background, with a unique and public DNS entry and it will also package the manifest with that unique URL and then do the exact same thing as gulp serve . After running gulp ngrok-serve , create a new Microsoft Teams team and when it is created click on the Team name, to go to the teams settings and then select Apps . In the lower right corner you should see a link Upload a custom app , select it and then browse to your project folder and the subfolder called package . Select the zip file in that folder and choose open. Your App is now sideloaded into Microsoft Teams. Go back to the General channel and select + to add a new Tab. You should see your tab in the list of tabs. Choose your tab and follow the instructions to add it. Notice that you have a custom configuration dialog, for which you can edit the source. Select Save to add your tab to the channel. Once done your tab should be loaded inside Microsoft Teams! Congrats! You built and deployed your first Microsoft Teams App Yo Teams","title":"Run your app in Microsoft Teams"},{"location":"user-guide/codespaces/","text":"Development with Github Codespaces \u00b6 The Yo Teams Gulp tasks will automatically detect if you're running a Yo Teams project inside a Github Codespace. The PUBLIC_HOSTNAME will automatically be set as the public DNS name of your Github Codespace when running gulp codespace-serve . The only manual step is to make the exposed port (3007 by default) Public (default is private).","title":"Using GitHub code spaces"},{"location":"user-guide/codespaces/#development-with-github-codespaces","text":"The Yo Teams Gulp tasks will automatically detect if you're running a Yo Teams project inside a Github Codespace. The PUBLIC_HOSTNAME will automatically be set as the public DNS name of your Github Codespace when running gulp codespace-serve . The only manual step is to make the exposed port (3007 by default) Public (default is private).","title":"Development with Github Codespaces"},{"location":"user-guide/deploy-to-teams/","text":"Deployment to Teams App Store \u00b6 NOTE : requires generator-teams 3.2.0 or later In order to streamline the development cycle Yo Teams 3.2.0 and later includes a plugin to make deployment to Teams App store easier. The yoteams-deploy package is a plugin for the Yo Teams Gulp tasks that adds a new flag to the serve and *-serve tasks, called --publish . When this flag is used the Gulp task will after building the manifest automatically upload the package to the Microsoft Teams App Store. You will the first time this is used be asked to sign in to the tenant of your choice.","title":"Deploy to teams"},{"location":"user-guide/deploy-to-teams/#deployment-to-teams-app-store","text":"NOTE : requires generator-teams 3.2.0 or later In order to streamline the development cycle Yo Teams 3.2.0 and later includes a plugin to make deployment to Teams App store easier. The yoteams-deploy package is a plugin for the Yo Teams Gulp tasks that adds a new flag to the serve and *-serve tasks, called --publish . When this flag is used the Gulp task will after building the manifest automatically upload the package to the Microsoft Teams App Store. You will the first time this is used be asked to sign in to the tenant of your choice.","title":"Deployment to Teams App Store"},{"location":"user-guide/setup-machine/","text":"Setup and prepare your machine \u00b6 You need to install the following on your machine before starting to use the Teams Generator. Install Node \u00b6 You need to have NodeJS installed on your machine. You should use the latest LTS version . Install a code editor \u00b6 You also need a code editor, feel free to use whatever text editor you prefer. However most of this documentation and screenshots refer to using Visual Studio Code . Install Yeoman and Gulp CLI \u00b6 To be able to scaffold projects using the Teams generator you need to install the Yeoman tool as well as the Gulp CLI task manager. Open up a command prompt and type the following: npm install yo gulp-cli --global Install the Microsoft Teams Apps generator - Yo Teams \u00b6 The Yeoman generator for Microsoft Teams apps are installed with the following command: npm install generator-teams --global Install preview versions \u00b6 If you want to install preview versions of the Teams generator with this command: npm install generator-teams@preview --global","title":"Setup your developer environment"},{"location":"user-guide/setup-machine/#setup-and-prepare-your-machine","text":"You need to install the following on your machine before starting to use the Teams Generator.","title":"Setup and prepare your machine"},{"location":"user-guide/setup-machine/#install-node","text":"You need to have NodeJS installed on your machine. You should use the latest LTS version .","title":"Install Node"},{"location":"user-guide/setup-machine/#install-a-code-editor","text":"You also need a code editor, feel free to use whatever text editor you prefer. However most of this documentation and screenshots refer to using Visual Studio Code .","title":"Install a code editor"},{"location":"user-guide/setup-machine/#install-yeoman-and-gulp-cli","text":"To be able to scaffold projects using the Teams generator you need to install the Yeoman tool as well as the Gulp CLI task manager. Open up a command prompt and type the following: npm install yo gulp-cli --global","title":"Install Yeoman and Gulp CLI"},{"location":"user-guide/setup-machine/#install-the-microsoft-teams-apps-generator-yo-teams","text":"The Yeoman generator for Microsoft Teams apps are installed with the following command: npm install generator-teams --global","title":"Install the Microsoft Teams Apps generator - Yo Teams"},{"location":"user-guide/setup-machine/#install-preview-versions","text":"If you want to install preview versions of the Teams generator with this command: npm install generator-teams@preview --global","title":"Install preview versions"},{"location":"user-guide/setup-tenant/","text":"Set up your Office 365 tenant \u00b6 In order to build applications for Microsoft Teams you need to have access to an Office 365 tenant with either global administrator permissions or have a global administrator allow you to do side-loading of apps. Your Microsoft 365 developer program membership entitles you to a special free Microsoft 365 E5 subscription with all the latest Microsoft 365 apps, Enterprise Mobility + Security, Azure AD, and more. You can use this subscription to build a developer sandbox where you can test your apps created with the Teams generator. Set up your free Microsoft 365 E5 developer subscription now! Enabling Microsoft Teams Apps and sideloading \u00b6 To enable Teams for your tenant and for more invormation see enabling Teams for your organization Enabling custom apps for Microsoft Teams is done via the Microsoft Teams admin center, https://admin.teams.microsoft.com . Use the navigation on the left hand side and choose Teams apps > Setup policies . To allow all users to sideload applications you should modify the Global policy to allow Upload custom apps . To only allow a subset of users to use side loading, then create a new policy with the setting and then assign that policy to the users you want to be able to sideload. For a more detailed guide on this see enable custom Teams apps and turn on custom app uploading","title":"Setup a developer tenant"},{"location":"user-guide/setup-tenant/#set-up-your-office-365-tenant","text":"In order to build applications for Microsoft Teams you need to have access to an Office 365 tenant with either global administrator permissions or have a global administrator allow you to do side-loading of apps. Your Microsoft 365 developer program membership entitles you to a special free Microsoft 365 E5 subscription with all the latest Microsoft 365 apps, Enterprise Mobility + Security, Azure AD, and more. You can use this subscription to build a developer sandbox where you can test your apps created with the Teams generator. Set up your free Microsoft 365 E5 developer subscription now!","title":"Set up your Office 365 tenant"},{"location":"user-guide/setup-tenant/#enabling-microsoft-teams-apps-and-sideloading","text":"To enable Teams for your tenant and for more invormation see enabling Teams for your organization Enabling custom apps for Microsoft Teams is done via the Microsoft Teams admin center, https://admin.teams.microsoft.com . Use the navigation on the left hand side and choose Teams apps > Setup policies . To allow all users to sideload applications you should modify the Global policy to allow Upload custom apps . To only allow a subset of users to use side loading, then create a new policy with the setting and then assign that policy to the users you want to be able to sideload. For a more detailed guide on this see enable custom Teams apps and turn on custom app uploading","title":"Enabling Microsoft Teams Apps and sideloading"},{"location":"user-guide/upgrading-projects/","text":"Upgrading projects \u00b6 Starting with Yo Teams version 2.11.0 upgrading from earlier versions of the generator is possible. An upgrade of a project includes the option of upgrading the core build files, which are required by certain features introduced in new versions. Projects can be updated either automatically using the generator or manually. Note: See release notes for upgrade compatibility Automatically upgrade a project \u00b6 Microsoft Teams apps projects created by Yo Teams (from version 2.9) can automatically be updated by running the generator once again over the project (starting from version 2.11). Always check release notes for individual versions for upgrades, as some does not support upgrading. Upgrade notes \u00b6 NOTE: See each specific release note for more details. When running the generator using yo teams on an existing project you will be prompted if you want to continue - select Yes to continue the upgrade. If the project can be updated the next question asks you if you want to update the yo teams core files - select Yes to allow the generator to update the necessary files. Before you do this you should ensure that you have your source files under source control, so that you can inspect and potentially revert any changes being done by the generator. Once the generator is finished it will update the core files as required. Note: you will only be asked once for updating the core build files. Subsequent executions of the generator on the project will assume an upgrade has been done. Manually upgrading a project \u00b6 Manually upgrading a project might be required if you have made changes to the core build files or the automatic upgrade fails. To manually upgrade a project the best way is to create a new blank project using the latest generator. Then use a file comparison tool and compare the new project with the one you want to upgrade.","title":"Upgrading projects"},{"location":"user-guide/upgrading-projects/#upgrading-projects","text":"Starting with Yo Teams version 2.11.0 upgrading from earlier versions of the generator is possible. An upgrade of a project includes the option of upgrading the core build files, which are required by certain features introduced in new versions. Projects can be updated either automatically using the generator or manually. Note: See release notes for upgrade compatibility","title":"Upgrading projects"},{"location":"user-guide/upgrading-projects/#automatically-upgrade-a-project","text":"Microsoft Teams apps projects created by Yo Teams (from version 2.9) can automatically be updated by running the generator once again over the project (starting from version 2.11). Always check release notes for individual versions for upgrades, as some does not support upgrading.","title":"Automatically upgrade a project"},{"location":"user-guide/upgrading-projects/#upgrade-notes","text":"NOTE: See each specific release note for more details. When running the generator using yo teams on an existing project you will be prompted if you want to continue - select Yes to continue the upgrade. If the project can be updated the next question asks you if you want to update the yo teams core files - select Yes to allow the generator to update the necessary files. Before you do this you should ensure that you have your source files under source control, so that you can inspect and potentially revert any changes being done by the generator. Once the generator is finished it will update the core files as required. Note: you will only be asked once for updating the core build files. Subsequent executions of the generator on the project will assume an upgrade has been done.","title":"Upgrade notes"},{"location":"user-guide/upgrading-projects/#manually-upgrading-a-project","text":"Manually upgrading a project might be required if you have made changes to the core build files or the automatic upgrade fails. To manually upgrade a project the best way is to create a new blank project using the latest generator. Then use a file comparison tool and compare the new project with the one you want to upgrade.","title":"Manually upgrading a project"},{"location":"user-guide/using-multiple-manifests/","text":"Using multiple manifest files \u00b6 NOTE : requires yoteams-build-core 1.1.0 or later Yo Teams supports having multiple manifests files. There are many scenarios where you would like to have multiple manifest files and Teams App packages generated, for instance: Having one application but multiple Teams Apps, such as one for users and one for admins, but still using the same hosting and solution Working with multiple environments and you want to build different manifests for different environments, including different icons Working with multiple developer environments where validDomains and Tab SSO App Id URI's are different. How to use multiple manifests with Yo Teams \u00b6 By default, the scaffolded project will contain one manifest.json , located in ./src/manifest/ . To add additional manifest files you either create a new .json file and manually create the manifest, or copy the existing manifest into a new file in the same folder. The build tasks manifest and validate-manifest will now work cross all those defined manifest.json files and validate and create a separate package for each of them. The package name will be the name of the packageName in the manifest and only referenced icons and localization files will be included in the package. Add this feature to an existing project \u00b6 If you scaffolded a project using Yo Teams v 3.0.x then you might need to update the build tools to support this feature. This is done using the following command npm install yoteams-build-core@preview --save-dev A word of caution \u00b6 When working with multiple manifests there are a couple of things to keep in mind. If you create a new manifest from a copy of an existing one it is important that you change the packageName so that they are different - as that is used to create the package zip file. If you intend to use the multiple packages in the same environment it is required that you have different id 's in your manifest files.","title":"Using multiple manifests"},{"location":"user-guide/using-multiple-manifests/#using-multiple-manifest-files","text":"NOTE : requires yoteams-build-core 1.1.0 or later Yo Teams supports having multiple manifests files. There are many scenarios where you would like to have multiple manifest files and Teams App packages generated, for instance: Having one application but multiple Teams Apps, such as one for users and one for admins, but still using the same hosting and solution Working with multiple environments and you want to build different manifests for different environments, including different icons Working with multiple developer environments where validDomains and Tab SSO App Id URI's are different.","title":"Using multiple manifest files"},{"location":"user-guide/using-multiple-manifests/#how-to-use-multiple-manifests-with-yo-teams","text":"By default, the scaffolded project will contain one manifest.json , located in ./src/manifest/ . To add additional manifest files you either create a new .json file and manually create the manifest, or copy the existing manifest into a new file in the same folder. The build tasks manifest and validate-manifest will now work cross all those defined manifest.json files and validate and create a separate package for each of them. The package name will be the name of the packageName in the manifest and only referenced icons and localization files will be included in the package.","title":"How to use multiple manifests with Yo Teams"},{"location":"user-guide/using-multiple-manifests/#add-this-feature-to-an-existing-project","text":"If you scaffolded a project using Yo Teams v 3.0.x then you might need to update the build tools to support this feature. This is done using the following command npm install yoteams-build-core@preview --save-dev","title":"Add this feature to an existing project"},{"location":"user-guide/using-multiple-manifests/#a-word-of-caution","text":"When working with multiple manifests there are a couple of things to keep in mind. If you create a new manifest from a copy of an existing one it is important that you change the packageName so that they are different - as that is used to create the package zip file. If you intend to use the multiple packages in the same environment it is required that you have different id 's in your manifest files.","title":"A word of caution"},{"location":"user-guide/vscode/","text":"Debugging with Visual Studio Code \u00b6 If the application is started with the --debug flag, then you can use the built-in debug configurations to step through your code. Debug (Edge) will open up Edge in remote debugging mode and also connect to the server side for debugging Debug (Chrome) will open up Chrome in remote debugging mode and also connect to the server side for debugging Attach to server will only connect to the server side for debugging Launch client (Edge) will only open up Edge in remote debugging mode Launch client (Chrome) will only open up Chrome in remote debugging mode","title":"Debugging"},{"location":"user-guide/vscode/#debugging-with-visual-studio-code","text":"If the application is started with the --debug flag, then you can use the built-in debug configurations to step through your code. Debug (Edge) will open up Edge in remote debugging mode and also connect to the server side for debugging Debug (Chrome) will open up Chrome in remote debugging mode and also connect to the server side for debugging Attach to server will only connect to the server side for debugging Launch client (Edge) will only open up Edge in remote debugging mode Launch client (Chrome) will only open up Chrome in remote debugging mode","title":"Debugging with Visual Studio Code"}]}